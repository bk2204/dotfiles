---
- name: Codespace Setup
  hosts: all
  environment:
    DEBIAN_FRONTEND: noninteractive
  tasks:
    - name: Disable Homebrew analytics
      shell: 'if command -v brew >/dev/null 2>&1; then brew analytics off; fi'
    - name: Check if this is a minimized Ubuntu image
      stat:
        path: /etc/dpkg/dpkg.cfg.d/excludes
        get_checksum: no
        get_mime: no
        get_attributes: no
      register: minimized_image
    - name: Install manual pages
      shell: 'yes | unminimize'
      become: yes
      become_user: root
      ignore_errors: true
      when: minimized_image.stat.exists
    - name: Install git-core PPA
      apt_repository:
        repo: ppa:git-core/ppa
      become: yes
      become_user: root
      when: ansible_distribution_release == 'focal'
    - name: Install neovim-stable PPA
      apt_repository:
        repo: ppa:neovim-ppa/stable
      become: yes
      become_user: root
      when: ansible_distribution_release == 'focal'
    - name: Install dependencies
      apt:
        pkg:
          - acl
          - cargo
          - dc
          - git
          - gnupg
          - less
          - libpam-tmpdir
          - locales-all
          - make
          - man-db
          - ncurses-term
          - neovim
          - perl
          - ruby
          - ruby-neovim
          - rustc
          - sshfs
          - tmux
          - xxd
          - zsh
        update_cache: true
      become: yes
      become_user: root
    - name: Install gopls
      apt:
        pkg:
          - gopls
      become: yes
      become_user: root
      ignore_errors: true
    # This is required because otherwise installing the zsh configuration causes
    # zsh to fail because compinit operates on an insecure directory (~/.zsh).
    - name: Remove broken ACL for /workspaces
      shell: 'if [ -n "$(getfacl -s /workspaces)" ]; then setfacl -Rb /workspaces; fi'
      become: yes
      become_user: root
    - name: Remove broken ACL for /tmp
      shell: 'if [ -n "$(getfacl -s /tmp)" ]; then setfacl -Rb /tmp; fi'
      become: yes
      become_user: root
    - name: Find /workspaces permissions
      stat:
        path: /workspaces
      register: st
    # We would like sane ownership and permissions here.
    - name: Undo unexpected ACL ownership on /workspaces
      command: 'chown -R {{ ansible_user_id }}:{{ ansible_user_id }} /workspaces'
      become: yes
      become_user: root
      when: st.stat.pw_name != ansible_user_id
    - name: Undo unexpected ACL ownership on home directory
      command: 'chown -R {{ ansible_user_id }}:{{ ansible_user_id }} /home/{{ ansible_user_id }}'
      become: yes
      become_user: root
    - name: Undo unexpected ACL permissions
      command: 'chmod -R o-rwx /workspaces'
      become: yes
      become_user: root
    - name: Clone dotfiles
      git:
        repo: https://github.com/bk2204/dotfiles.git
        remote: def
        dest: /workspaces/dotfiles
    - name: Checkout GitHub for dotfiles
      shell: 'git checkout GitHub'
      args:
        chdir: /workspaces/dotfiles
    - name: Checkout submodules for dotfiles
      shell: 'git submodule update --init'
      args:
        chdir: /workspaces/dotfiles
    - name: Deploy dotfiles
      shell: 'make install'
      args:
        chdir: /workspaces/dotfiles
    - name: Change shell
      command: 'chsh -s /bin/zsh {{ ansible_user_id }}'
      become: yes
      become_user: root
    - name: Deploy muter
      command: 'cargo install muter'
    - name: Deploy scutiger
      command: 'cargo install scutiger-bin'
    - name: Deploy Lawn
      command: 'cargo install --git https://github.com/bk2204/lawn.git --rev refs/heads/dev lawn'
    - name: Setup remote repository
      shell: 'for i in /workspaces/*; do "$HOME/bin/dct-snip" -r setup-repository "$i"; done'
    - name: Install neovim-gtk helper
      shell: 'cd ~/.vim/plugin && curl -LO https://raw.githubusercontent.com/Lyude/neovim-gtk/main/runtime/plugin/nvim_gui_shim.vim'
    - name: Create Lawn socket dir
      shell: 'mkdir -p "$HOME/.local/run/lawn"'
    - name: Create Lawn mount dir
      shell: 'mkdir -p "$HOME/mnt/remote"'
