" Configuration file for vim

"" Set up options.
" First things first.
set nocp

" Spacing and indentation.
set ts=2
set sw=2
set sts=2
set et
set ai

" Backups, saving, and statefulness.
set uc=0          " No swap file.
set nobk          " No backups.
set vi='100,\"50  " 100 marks and 50 lines.
set hi=50         " 50 items in command line history.

" Numbering.
set nu
set nuw=5

" Status line.
set ru          " Turn on ruler.
set ls=2        " Always show a status bar for powerline.

" Folding.
if has("folding")
  set fdm=syntax
  set fdls=9999999
endif

" Text handling.
set spc=        " Don't complain about uncapitalized words starting a sentence.
set flp=^[-*+•]\\+\\s\\+  " Don't indent lines starting with a number and a dot.
set fo+=n       " Indent lists properly.
set fo+=or      " Insert comment characters when inserting a new line.
if v:version >= 704 || (v:version == 703 && has("patch541"))
  set fo+=j       " Remove comment characters when joining lines.
endif
if v:version > 704 || (v:version == 704 && has("patch785"))
  set nofixeol
endif
set tw=80               " Default text width of 80 characters.
set bs=indent,eol,start
set wrap
set mps+=<:>
set nf=alpha,hex,octal  " Make Ctrl-S and Ctrl-X work on text.

" Loading files.
set noml        " We use securemodelines instead.
set enc=utf-8   " Always use UTF-8.
set tenc=utf-8
set wim=longest,full
set su=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
set hid         " Don't force saving when changing buffers.

" Search.
set nohls

" Rendering.
if has("tf") && (exists("$SSH_CONNECTION") || filereadable(expand("$HOME") . '/.slowbox'))
  set notf      " Speed up redrawing on slow SSH connections.
endif
if has("termguicolors") && (&t_Co == 16777216 || (exists("$COLORTERM") && $COLORTERM == "truecolor"))
  set tgc
end

"" Terminal issues.
" These terminals are capable of supporting 16 colors, but they lie and only
" claim support for 8.  Fix it so things don't look ugly.
if &term == "xterm" || &term == "xterm-debian" || &term == "xterm-xfree86"
  set t_Co=16
  set t_Sf=[3%dm
  set t_Sb=[4%dm
endif
if has("termguicolors") && &tgc && &t_8f == ''
  set t_8f=[38;2;%lu;%lu;%lum
  set t_8b=[48;2;%lu;%lu;%lum
endif
" Use Ctrl-W to switch between terminals.
if exists("&termkey")
  set termkey=<C-W>
elseif exists("&termwinkey")
  set termwinkey=<C-W>
end

"" Comamnds.
if has("user_commands")
  command! -range=% Trailing    call <SID>ClearTrailingWhitespace(<line1>, <line2>, "")
  command! -range=% TrailingAll call <SID>ClearTrailingWhitespace(<line1>, <line2>, "\v(^--)@<!\s+$")
  command! Edir execute ':e ' . expand('%:p:h')
  command! -nargs=1 Emod  execute ':e ' . <SID>ModulePath("<args>")
  command! -nargs=? Notes           call <SID>EditNotes(<f-args>)
  command! Scratch              call <SID>ScratchBuffer()
endif

"" Maps.
" Show highlighting groups under cursor.
noremap <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name")  . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
" "+ is hard to type.  Map it to something easier.
noremap <Leader><Leader> "+
noremap <Leader>c "*
" Map the blackhole register to <Leader>s.
noremap <Leader>s "_
" Delete without saving the deleted text with <Leader>d and a motion,
noremap <Leader>d "_d
" Trim trailing whitespace in a way appropriate for the current file type.
noremap <Leader>w :Trailing<CR>
" Trim all trailing whitespace, no matter what.
noremap <Leader>zw :TrailingAll<CR>
" Copy relative buffer filename to register.
noremap <Leader>zf :call <SID>CopyBufferToRegister("", v:register)<CR>
" Copy absolute buffer filename to register.
noremap <Leader>zF :call <SID>CopyBufferToRegister(":p", v:register)<CR>
" Copy servername to register.
noremap <Leader>zs :call <SID>CopyServerToRegister(v:register)<CR>
" Toggle whitespace highlighting.
noremap <Leader>t :call <SID>ToggleWhitespaceChecking()<CR>
" Toggle executable bit.
noremap <Leader>x :call <SID>ToggleExecutable()<CR>
" Toggle large and small screen.
nnoremap <Leader>zz :call <SID>ToggleScreenSize()<CR>
" Toggle paste mode.
nnoremap <Leader>pp :set paste!<CR>
" Toggle list mode.
nnoremap <Leader>ll :set list!<CR>
" Navigate to errors, warnings, and definitions.
nnoremap <Leader>gg :ALEFirst<CR>
nnoremap <Leader>gG :ALELast<CR>
nnoremap <Leader>gn :ALENextWrap<CR>
nnoremap <Leader>gN :ALEPreviousWrap<CR>
" Show details about what's under the cursor via LSP.
nnoremap <Leader>gd :ALEDetail<CR>
" Show hover information about what's under the cursor via LSP.
nnoremap <Leader>gs :ALEHover<CR>
" Go to the definition, possibly in a new split.
nnoremap <Leader>gj :ALEGoToDefinition<CR>
nnoremap <Leader>gJ :ALEGoToDefinition -split<CR>
" Go to the type definition, possibly in a new split.
nnoremap <Leader>gt :ALEGoToTypeDefinition<CR>
nnoremap <Leader>gT :ALEGoToTypeDefinition -split<CR>
" Go to the implementation, possibly in a new split.
nnoremap <Leader>gi :ALEGoToImplementation<CR>
nnoremap <Leader>gI :ALEGoToImplementation -split<CR>
" Find references to what's under the cursor.
nnoremap <Leader>gf :ALEFindReferences<CR>
nnoremap <Leader>gF :ALEFindReferences -split<CR>
" Fix or format the code in this file.
nnoremap <Leader>b :ALEFix<CR>
" Ctrl-A is too easily mistyped.  Use Ctrl-S instead.
noremap <C-S> <C-A>
noremap <C-A> <Nop>
" u/U is too easily mistyped.  Use gu/gU instead.
vnoremap u <Nop>
vnoremap U <Nop>
" Plugins.
noremap <Leader>v :ToggleBufExplorer<CR>

"" Graceful exit.
" Versions of Vim without +eval will exit here.
if 0 | finish | endif

"" Automatic file handling.
if has("autocmd")
  filetype plugin indent on
endif
" If we are in a dumb terminal, disable colors and anything that tries to use
" them, including syntax highlighting; otherwise, enable syntax highlighting.
if !has("gui_running") && $TERM == 'dumb'
  hi clear
  set t_Co=0
  syntax off
else
  syntax enable
endif

"" Mode-specific settings.
" Set s:mode to "ex" if we're in ex mode and "vi" otherwise.
let s:mode = (mode(1) == 'cv' || mode(1) == 'ce') ? 'ex' : 'vi'

"" Global constants.
let s:max_lines = 97

"" Autocommands.
" Setting file type.
augroup setf
  au BufEnter,BufRead,BufNewFile *.adoc                   setf asciidoc
  au BufEnter,BufRead,BufNewFile ~/*.txt                  setf asciidoc
  au BufEnter,BufRead,BufNewFile merge_request_testing.*  setf asciidoc
  au BufEnter,BufRead,BufNewFile *.h                      setf c
  au BufEnter,BufRead,BufNewFile *.dbx                    setf docbkxml
  au BufEnter,BufRead,BufNewFile *.mx                     setf groff
  au BufEnter,BufRead,BufNewFile $VIMRUNTIME/doc/*.txt    setf help
  au BufEnter,BufRead,BufNewFile reportbug-*              setf mail
  au BufEnter,BufRead,BufNewFile reportbug.*              setf mail
  au BufEnter,BufRead,BufNewFile *.xml                    setf xml
  au BufEnter,BufRead,BufNewFile *.xsl                    setf xslt
  au BufEnter,BufRead,BufNewFile *.pasm                   setf parrot
  au BufEnter,BufRead,BufNewFile *.pir                    setf pir
  au BufEnter,BufRead,BufNewFile *.iced                   setf coffee
  au BufEnter,BufRead,BufNewFile lib6/*.pm                setf perl6
  au BufEnter,BufRead,BufNewFile *.ronn                   setf markdown
  au BufEnter,BufRead,BufNewFile PULLREQ_EDITMSG          setf markdown
augroup end

" File type-specific parameters.
augroup setl
  au FileType asciidoc      setl tw=0 ts=2 sw=2 sts=2 spell com=b://
  au FileType clojure       setl ts=2 sw=2 sts=2
  au FileType cpp           setl cin cino=t0
  au FileType c             setl cin cino=t0
  au FileType cs            setl cin cino=t0
  au FileType docbkxml      setl cms=<!--%s-->
  au FileType eruby         setl ts=2 sw=2 sts=2 et si
  au FileType gitcommit     setl tw=72 spell com=b:# ts=4 sw=4 sts=4
  au FileType gitsendemail  setl tw=72 spell
  au FileType go            setl ts=8 sw=8 sts=8 noet spell
  au FileType javascript    setl cin cino=t0,j1,J1
  au FileType java          setl cin cino=t0,j1
  au FileType make          setl noet
  au FileType mail          setl tw=72 ts=2 sw=2 sts=2 et spell com=n:> fo-=or
  au FileType markdown      setl tw=0 ts=2 sw=2 sts=2 spell
  au FileType perl          setl com=b:#/,b:#
  au FileType python        setl et si tw=79 com=b:#/,b:#
  au FileType rst           setl et si ts=2 sw=2 sts=2 spell
  au FileType rust          setl spell
  au FileType ruby          setl ts=2 sw=2 sts=2 et si com=b:#/,b:#
  au FileType sass          setl tw=0
  au FileType scss          setl tw=0
  au FileType sh            setl com=b:#/,b:#
  au FileType vim           setl ts=2 sw=2 sts=2
  au FileType xslt          setl tw=0 ts=2 sw=2 sts=2
augroup end

" File-specific parameters.
augroup setl-file
  au BufEnter,BufRead,BufNewFile PULLREQ_EDITMSG  setl tw=0
augroup end

" Language-specific variables.
if v:version >= 700
  augroup let
    au FileType mail      let b:airline_whitespace_disabled = 1
  augroup end
endif

" Syntax commands.
augroup syntax
  au FileType asciidoc    syn sync clear | syn sync minlines=25
augroup end

" Whitespace-related autocommands.
if (v:version >= 702 || (v:version == 701 && has("patch40"))) && s:mode != 'ex'
  " matchadd and friends showed up in Vim 7.1.40.
  augroup whitespace
    au FileType     *       call s:SetWhitespacePattern(0)
    au BufWinEnter  *       call s:SetWhitespacePattern(0)
    au WinEnter     *       call s:SetWhitespacePattern(0)
    au InsertEnter  *       call s:SetWhitespacePattern(1)
    au InsertLeave  *       call s:SetWhitespacePattern(0)
    " Prevent a memory leak in old versions of Vim.
    au BufWinLeave  *       call clearmatches()
    au WinLeave     *       call clearmatches()
    au Syntax       *       call s:SetWhitespacePattern(0)
    au ColorScheme  *       hi def link bmcTrailingWhitespace Error
    au ColorScheme  *       hi def link bmcSpaceTabWhitespace Error
    au ColorScheme  *       hi def link bmcTrailingNewline  Error
  augroup end
endif

" Event-related tasks.
if v:version >= 702
  augroup events
    au FileChangedShellPost * AirlineRefresh
    au FileType             * call s:AdjustLinters()
    au BufWinEnter          * call s:LoadLSP()
  augroup end
endif

" Spelling-related tasks.
augroup spell
  au FileType go    call s:FixSpellingHighlighting()
  au FileType rust  call s:FixSpellingHighlighting()
augroup end

"" Color scheme.
" This needs to go after the whitespace handling, since it can cause warnings if
" placed before it.
"
" If we're in some sort of visual mode, enable the color scheme.  Skip if we're
" in ex mode, since we probably have a dumb terminal and don't want colors.
if s:mode != 'ex'
  colorscheme ct-grey
endif

"" Graceful exit.
" Vim 6.3 gets very upset if it sees lists or dictionaries, or, for that matter,
" Pathogen.
if v:version < 700
  finish
endif

"" Bundles.
" Some versions of Vim have a broken autoload, or at least it doesn't work in
" this case, so help it out.
runtime autoload/pathogen.vim
let Fn = function("pathogen#infect")
execute Fn()

"" Language-related functions.
" Ale.
function! s:AdjustLinters()
  if &ft == 'eruby'
    call ale#linter#Define('eruby', {
    \   'name': 'erubylint',
    \   'executable': 'erb',
    \    'output_stream': 'stderr',
    \   'command': 'erb -P -T- -x %t | ruby -c',
    \   'callback': 'ale#handlers#ruby#HandleSyntaxErrors',
    \})
  endif
endfunction

"" Whitespace handling functions.
" Turn it on.
function! s:EnableWhitespaceChecking()
  if !exists('b:whitespace')
    let b:whitespace = {'enabled': -1, 'patterns': {}}
  endif
  if b:whitespace['enabled'] == -1
    let b:whitespace['enabled'] = s:GetDefaultWhitespaceMode()
    for i in s:GetPatternList()
      let b:whitespace['patterns'][i] = -1
    endfor
  endif
endfunction

" Toggle it.
function! s:ToggleWhitespaceChecking()
  let b:whitespace['enabled'] = !b:whitespace['enabled']
  call s:SetWhitespacePattern(0)
endfunction

" List of all the patterns.
function! s:GetPatternList()
  return ['trailing', 'spacetab', 'newline']
endfunction

function! s:GetDefaultWhitespaceMode()
  return &ft == "help" && &readonly ? 0 : 1
endfunction

" Set up the patterns.
function! s:SetWhitespacePattern(mode)
  if !s:GetDefaultWhitespaceMode()
    call clearmatches()
    return
  endif
  call s:EnableWhitespaceChecking()
  for i in s:GetPatternList()
    try
      call matchdelete(b:whitespace['patterns'][i])
    catch /E80[23]/
    endtry
  endfor
  if b:whitespace['enabled']
    if a:mode == 1
      let pattern = s:SetWhitespacePatternGeneral() . '%#@<!$'
    elseif a:mode == 0
      let pattern = s:SetWhitespacePatternGeneral() . '$'
    endif
    let stpat = s:SetWhitespacePatternSpaceTab()
    let tnpat = '\v\n%$'
    let patterns = {}
    let patterns['trailing'] = matchadd('bmcTrailingWhitespace', pattern)
    let patterns['spacetab'] = matchadd('bmcSpaceTabWhitespace', stpat)
    let patterns['newline'] = matchadd('bmcTrailingNewline', stpat)
    let b:whitespace['patterns'] = patterns
  else
    let b:whitespace['patterns'] = {}
    for i in s:GetPatternList()
      let b:whitespace['patterns'][i] = -1
    endfor
  endif
endfunction

" Create a language-specific trailing whitespace pattern.
function! s:SetWhitespacePatternGeneral()
  if &et
    let indent = repeat(' ', &sw)
    let nonindent = '(\t| {' . (&sw+1) . '}| {1,' . (&sw-1) . '})'
  else
    let indent = '\t'
    let nonindent = '( +)'
  endif
  let pod_indent = exists('g:bmcPodIndentOk') && g:bmcPodIndentOk
  if &ft == "mail"
    " ExtEdit puts trailing whitespace in header fields.  Don't warn about this,
    " since it will strip it off.  mutt always inserts "> " for indents; don't
    " warn about that either.  And finally, don't warn about the signature
    " delimiter, since there's nothing we can do about that.
    let pattern = '\v(^(--|[A-Z]+[a-zA-Z-]+:\s*|[> ]*\>))@<!'
    " If we're in format=flowed mode, ignore a single trailing space at the end
    " of a nonempty line.
    if &fo =~ 'w'
      let pattern .= '(\s{2,}|\t\s*|^\s+)'
    else
      let pattern .= '\s+'
    endif
  elseif &ft == "diff" || &ft == "review"
    " Don't complain about extra spaces if they start at the beginning of a
    " line.  git and diff insert these.
    let pattern = '\v(^\s*)@<!\s+'
  elseif (&ft == "perl" || &ft == "pod") && pod_indent
    " Unfortunately, Pod uses spaces to delimit a verbatim block, so don't
    " complain about spaces if they use the standard indent.
    let pattern = '\v(^' . indent . '\s+|^(' . nonindent . ')|(\S)@<=\s+)'
  else
    let pattern = '\v\s+'
  endif
  return pattern
endfunction

" Create a language-specific space-followed-by-tab pattern.
function! s:SetWhitespacePatternSpaceTab()
  if &ft == "diff" || &ft == "review"
    " Don't complain about extra spaces if they start at the beginning of a
    " line.  git and diff insert these.
    let pattern = '\v(^)@<! +\ze\t+'
  else
    let pattern = '\v +\ze\t+'
  endif
  return pattern
endfunction

function! s:ClearTrailingWhitespace(start, end, pattern)
  if a:pattern
    let pattern = a:pattern
  else
    let pattern = s:SetWhitespacePatternGeneral() . '$'
  endif
  call <SID>ForRange(a:start, a:end, 's/' . pattern . '//g', 'silent!')
endfunction

function! s:ForRange(start, end, command, ...)
  let winview = winsaveview()
  let text = ":"
  " Optional prefix.  Can be used for :silent
  if a:0
    let text .= a:1 . " "
  endif
  let text .= a:start . "," . a:end . a:command
  execute text
  call winrestview(winview)
endfunction

function! s:FixSpellingHighlighting()
  " Don't flag words with capitalized letters. These are often class or method
  " names, and camel case words are not usually in the dictionary.
  syn match bmcCapitalizedWords +\<\w*[A-Z]\K*\>+ contains=@NoSpell transparent
  syn cluster Spell add=bmcCapitalizedWords
endfunction

function! s:SetUpLanguageHooks()
  if has("perl") && isdirectory(expand("$HOME") . '/lib/perl5')
    perl splice @INC, -1, 0, "$ENV{'HOME'}/lib/perl5"
  endif
endfunction

function! s:ModulePathPerl(module)
  perl <<EOM
  package vimrc::bmc;
  sub f {
    my $m = shift;
    $m =~ s{::}{/}g;
    for (@INC) {
      my $p = "$_/$m.pm";
      return $p if -e $p;
    }
    return '';
  }
  my $x = VIM::Eval('a:module');
  my $p = f($x);
  # Sanitize because of VIM::DoCommand.
  $p = '' if $p =~ tr{A-Za-z0-9./_-}{}c;
  VIM::DoCommand("let path = '$p'")
EOM
  return path
endfunction

function! s:ModulePath(module)
  if has("perl")
    return s:ModulePathPerl(a:module)
  endif
  return ''
endfunction

" Toggle the executable bit on the file underlying the current buffer, using
" either Ruby or Perl, as available.  The file should be saved and unmodified.
function! s:ToggleExecutable()
  if has("ruby") || has("perl")
    setl ar
    if has("ruby")
      ruby <<EOM
      file = Vim::evaluate('expand("%")')
      mode = File.stat(file).mode & 0777
      mode ^= (00111 & ~File.umask)
      File.chmod(mode, file)
EOM
    else
      perl <<EOM
      my $file = VIM::Eval('expand("%")');
      my $mode = (stat($file))[2] & 07777;
      $mode ^= (00111 & ~umask);
      chmod($mode, $file);
EOM
    endif
    exe "checktime " . bufnr("%")
    set ar<
  endif
endfunction

" Look in ~/Documents/notes (or its replacement) for an AsciiDoc file named the
" same thing as the argument, or as the current Git repository directory (if no
" argument is given), and edit it.
function! s:EditNotes(...)
  let docpath = system('xdg-user-dir DOCUMENTS 2>/dev/null')
  if !docpath
    let docpath = expand('$HOME') . '/Documents'
  endif
  let notespath = docpath . '/notes'
  if len(a:000) == 1
    let file = a:1
  else
    let toplevel = system('git rev-parse --show-toplevel 2>/dev/null | tr -d "\n"')
    if toplevel == expand('$HOME')
      let file = 'homedir'
    else
      let file = fnamemodify(toplevel, ':t')
    endif
  endif
  let path = notespath . '/' . file . '.adoc'
  exe "e " . path
endfunction

" Create a scratch buffer which cannot be saved and will be destroyed without
" notice on exit.
function! s:ScratchBuffer()
  enew
  setl bt=nofile
  setl bh=hide
  setl noswf
endfunction

" Expand the current buffer's path with suffix and copy it to register.
function! s:CopyBufferToRegister(suffix, register)
  call setreg(a:register, expand("%" . a:suffix))
endfunction

" Copy the current servername to register.
function! s:CopyServerToRegister(register)
  call setreg(a:register, v:servername)
endfunction

function! s:ToggleScreenSize()
  let default=24
  if &lines == default
    let &lines = s:max_lines
  else
    let &lines = default
  endif
endfunction

function! s:SetGUIOptions()
  " If we're in a GUI…
  if has("gui_running") || (has("nvim") && !has("ttyout") && s:mode == 'vi')
    set lines=24
    set co=133
    set gcr+=a:blinkon0
    set go-=tT      " Disable tearoffs and toolbar.

    " If we're in a GTK+ (Linux) Vim GUI…
    if has("gui_gtk")
      set gfn=Source\ Code\ Pro\ 12,Noto\ Mono\ Regular\ 12,Monospace\ 12
    endif
    " If we're using MacVim…
    if has("gui_macvim")
      set gfn=SourceCodePro-Regular:h8
    endif
    " If we're in a Neovim GUI, such as Neovim-GTK…
    if has("nvim")
      Guifont SourceCodePro:h12
    endif
  endif
endfunction

function! s:SortLSPRoots(a, b)
  " Sort the longest items first, since these will be more specific.
  let x = len(a:b) - len(a:a)
  return x / abs(x)
endfunction

" Find the LSP root by looking for the nearest .git file or directory or the
" nearest .lsproot file and return it.
function! s:FindLSPRoot()
  let buffer = bufnr("%")

  " If we're in a submodule, .git will often, but not always, be a file, not a
  " directory. Check both and pick the more deeply nested one.
  let lsp_root_file = fnamemodify(ale#path#FindNearestFile(buffer, '.lsproot'), ':h')
  let git_file = fnamemodify(ale#path#FindNearestFile(buffer, '.git'), ':h')
  let git_dir = fnamemodify(ale#path#FindNearestDirectory(buffer, '.git'), ':h:h')

  let items = [lsp_root_file, git_file, git_dir]
  let items = filter(items, 'len(v:val) > 0')
  let items = sort(items, "s:SortLSPRoots")
  return items[0]
endfunction

" Set the local buffer's LSP root if one can be determined.
function! s:SetLSPRoot()
  let root = s:FindLSPRoot()

  if !empty(root)
    let b:ale_lsp_root = root
  endif
endfunction

" Perform LSP functionality.
function! s:LoadLSP()
  call <SID>SetLSPRoot()

  " If we have at least one LSP, enable ALE's omnicompletion functionality using
  " the LSP.
  let linters = ale#linter#Get(&ft)

  for i in linters
    if !empty(i['lsp'])
      setl omnifunc=ale#completion#OmniFunc
      break
    endif
  endfor
endfunction

"" Miscellaneous variables.
" Make sh highlighting POSIXy.
let g:is_posix=1

" Better just to leave POD as a big comment block.
let g:perl_include_pod = 0

" Allow subroutine signatures.
let g:perl_sub_signatures = 1

" Show us the real contents of the file.
let g:vim_json_syntax_conceal = 0

" Airline settings.
let g:airline_left_sep = '▶'
let g:airline_right_sep = '◀'
let g:airline_symbols = {}
let g:airline_symbols.branch = '⚡'
let g:airline_symbols.readonly = '☓'
let g:airline_symbols.linenr = '⁋'
let g:airline_detect_spell = 0
let g:airline#extensions#wordcount#enabled = 1
let g:airline#extensions#wordcount#filetypes = '\vmarkdown|rst|org|help|text|asciidoc'
if has("gui_running") || &t_Co > 16
  let g:airline_theme = 'powerlineish'
else
  let g:airline_theme = 'base16_solarized'
endif

" Ctrl-P settings.
let g:ctrlp_max_files = 60000
let g:ctrlp_match_window = 'results:75'

" Ctrl-P settings.  Regenerating the cache is expensive on large repos.
let g:ctrlp_extensions = ['buffertag']
let g:ctrlp_clear_cache_on_exit = 0

" EditorConfig settings.
let g:EditorConfig_max_line_indicator = 'none'
let g:EditorConfig_disable_rules = ['trim_trailing_whitespace']

let g:netrw_liststyle = 3

let g:bufExplorerDisableDefaultKeyMapping = 1
let g:bufExplorerShowNoName = 1
let g:bufExplorerShowUnlisted = 1
let g:bufExplorerSortBy = 'name'

let g:ale_linters = {
  \ 'go': ['gopls', 'gofmt', 'golint', 'go vet'],
  \ 'rust': ['cargo', 'analyzer'],
  \ }
let g:ale_fixers = {
  \ 'go': ['goimports'],
  \ 'perl': ['perltidy'],
  \ 'rust': ['rustfmt'],
  \ }
let g:ale_rust_rls_toolchain = ''
let g:ale_rust_cargo_use_clippy = isdirectory(expand("$HOME") . '/.cargo')
let g:ale_floating_preview = 1

let g:clipboard = {
  \ 'name': 'dct-clip',
  \ 'copy': {
  \   '*': 'dct-clip -i -p',
  \   '+': 'dct-clip -i -b',
  \ },
  \ 'paste': {
  \   '*': 'dct-clip -o -p',
  \   '+': 'dct-clip -o -b',
  \ },
  \ 'cache_enabled': 1
  \ }

"" Other language-specific setup.
call s:SetUpLanguageHooks()

" GUI settings.
if has("nvim")
  augroup gui
    au UIEnter * call <SID>SetGUIOptions()
  augroup end
elseif has("gui_running")
  call <SID>SetGUIOptions()
endif

" vim: set ts=2 sw=2 sts=2:
