# brian m. carlson's zshrc.
# For interactive use.

# Preparatory functions.
silent () {
    "$@" >/dev/null 2>&1
}
has_colors () {
    [[ $TERM != dumb ]]
}

# Set up some aliases.
silent ls --color=auto && has_colors && alias ls='ls --color=auto'
if silent command -v file-rename
then
    alias rename='file-rename'
elif silent command -v prename
then
    alias rename='prename'
fi

local vi=$(bmc_editor console)
if [[ $vi != vi ]]
then
    alias vi=$vi
    [[ $vi != vim ]] && alias vim=$vi
fi
unset vi

if silent command -v nvim-gtk
then
    alias gvim=nvim-gtk
fi

has_colors && alias grep='grep --color=auto'
alias rless='env -u LESSOPEN -u LESSCLOSE less'
alias loadenv='eval $(cat $HOME/.environment)'
alias tloadenv='eval $(tmux show-environment -s)'
alias sudo='sudo -E '
alias be='bundle exec'
alias en='LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8 '

# Set prompts.
PROMPT='%n@%m:%~(%?%)%# '

# Set options.
setopt shwordsplit bareglobqual
setopt interactivecomments
setopt promptsubst
setopt rmstarsilent
setopt histignorespace
setopt extendedhistory
setopt incappendhistorytime
setopt extendedglob
unsetopt bgnice notify nomatch banghist

# Set history.
HISTSIZE=1000000
SAVEHIST=$HISTSIZE
HISTFILE=~/.zsh_history

# Set key bindings.
bindkey -v
bindkey '^I' complete-word
bindkey '^R' history-incremental-search-backward
bindkey '^S' history-incremental-search-forward
bindkey '\eOF' vi-end-of-line
bindkey '\eOH' vi-beginning-of-line

# Some useful features.
set_tty () {
    [[ -n $TTY ]] && return 0
    [[ -n $GPG_TTY ]] && TTY=$GPG_TTY && return 0
    [[ -n $SSH_TTY ]] && TTY=$SSH_TTY && return 0
    TTY=$(tty) || TTY=""
}
has_term () {
    local termname="$1"
    # Redirection is required because zsh complains about bad TERM.
    TERM=$termname silent echotc xo 2>/dev/null
}
set_if_has_term () {
    local termname
    for termname in "$@"
    do
        if has_term "$termname"
        then
            export TERM="$termname";
            break
        fi
    done
}
set_sane_term () {
    local i
    # Make sure our terminal definition works right.
    if ! silent echotc xo 2>/dev/null
    then
        # No column results?  Do we have any working terminal definitions?
        local echotc_works=""
        for i in vt220 ansi xterm linux dumb
        do
            if has_term $i
            then
                # Yes, we do.
                echotc_works=1
                break
            fi
        done
        # Yes, we do, so we just have a bad TERM definition. vt220 is a good
        # fallback.
        if [[ -n $echotc_works ]]
        then
            local -a preferred
            if [[ -z ${TERM##screen*} ]]
            then
                preferred=(screen-256color screen vt220)
            elif [[ -z ${TERM:#tmux*} ]]
            then
                preferred=(tmux-direct tmux-256color screen-256color tmux screen vt220)
            elif [[ -z ${TERM:#*256color} ]]
            then
                preferred=(xterm-256color xterm vt220)
            else
                preferred=(vt220)
            fi
            for i in $preferred
            do
                set_if_has_term $i
                break
            done
        fi
    fi
    if is_ssh_session && [[ $SSH_TTY == $TTY ]]
    then
        case $TERM in
            screen-256color|tmux*)
                # This means we're using tmux on the other side.
                export COLORTERM=truecolor;;
            *)
                ;;
        esac
        return 0
    fi
    if is_docker_session
    then
        case $TERM in
            xterm*)
                # We're logging in from a tmux session.
                set_if_has_term xterm-256color
                export COLORTERM=truecolor;;
            *)
                ;;
        esac
        return 0
    fi
    local parent_exe="$(ps -p $PPID -o comm=)"
    case "$TERM:$parent_exe" in
        xterm:*vim*)
            [[ $COLORTERM = truecolor ]] && set_if_has_term xterm-direct xterm-256color;;
        xterm:*xfce4-terminal|xterm:*gnome-terminal|xterm:*mate-terminal)
            set_if_has_term vte-direct xterm-direct vte-256color xterm-256color;;
        xterm:*konsole)
            set_if_has_term konsole-256color;;
        screen*:*|tmux*:*)
            is_ssh_session && EDITOR=$(bmc_editor dumb console) && VISUAL=$(bmc_editor console)
            set_if_has_term tmux-direct tmux-256color screen-256color;;
        rxvt:*mrxvt-full)
            set_if_has_term rxvt-256color;;
        linux:*)
            # Usually /proc/$PPID/exe will be inaccessible because it's
            # /bin/login and owned by root, so don't try to match on it.
            set_if_has_term linux-16color;;
        *:*fbterm)
            # fbterm supports 256 colors.
            set_if_has_term fbterm;;
        *) ;;
    esac

    # Ensure key bindings are set up appropriately.
    if [[ -n $DISPLAY ]] && silent command -v xmodmap && [[ -e $HOME/.Xmodmap ]]
    then
        xmodmap $HOME/.Xmodmap
    fi

    # Don't print weird escape characters on dumb terminals (e.g. gvim).
    [[ $TERM = dumb ]] && unset zle_bracketed_paste
}
adjust_term_settings () {
    # Turn off flow control.
    silent stty -ixon -ixoff

    # Make sure that other people can't mess with our terminal.
    silent mesg n
}
remove_perl_overrides () {
    [ -n "$PERL_LOCAL_LIB_ROOT" ] && path=("${(@)path:#$PERL_LOCAL_LIB_ROOT/bin}")
    unset PERL_MB_OPT PERL_MM_OPT PERL_LOCAL_LIB_ROOT PERL5LIB
}
sless () {
    (
        # Help less handle compressed files better.
        silent whence lesspipe && eval $(lesspipe)
        less "$@"
    )
}
ggrep () {
    grep -r "$@" *
}
dumpenv () {
    (
        [[ -n $SSH_AUTH_SOCK ]] && print "export SSH_AUTH_SOCK=$SSH_AUTH_SOCK";
        [[ -n $DISPLAY ]] && print "export DISPLAY=$DISPLAY";
    ) > $HOME/.environment
    true
}
setup_colors () {
    has_colors || return
    [[ -f $HOME/.dircolors ]] && eval "$(dircolors $HOME/.dircolors 2>/dev/null)"

    # Set up termcap colors for less (from grml).

    export LESS_TERMCAP_mb=$(print -P $(bmc_palette bold))
    export LESS_TERMCAP_md=$(print -P $(bmc_palette bold))
    export LESS_TERMCAP_me=$(print -P $(color_reset))
    export LESS_TERMCAP_se=$(print -P $(color_reset))
    export LESS_TERMCAP_so=$(print -P $(bmc_palette standout))
    export LESS_TERMCAP_ue=$(print -P $(color_reset))
    export LESS_TERMCAP_us=$(print -P $(bmc_palette underline))
    export CLICOLOR=1
    export LSCOLORS=ExGxfxdxCxDxDxhBhBaCeC

    if !grep -qs Microsoft /proc/version 2>/dev/null
    then
        export GREP_COLORS=fn=$(bmc_palette_ansi grep)
    fi
}
setup_autoload () {
    local func i
    for func in $^fpath/*(.:t);
    do
        if [[ -n $func ]]; then
            autoload -U $func
        fi
    done

    for i in promptinit compctl complete complist computil insert-unicode-char;
    do
        autoload -U $i
    done
    compinit -u 2>/dev/null
}
tmux-title () {
    # Set the title to begin with a ZWSP.  The prompt precmd will not overwrite
    # it in this case.
    printf '\033k\342\200\213%s\033\\' "$@"
}
tmux-clear-title () {
    # Set the title to an empty string so the prompt will override it again.
    printf '\033k%s\033\\' ""
}

# Do this before any sort of importing or prompt setup, so that the prompt can
# take advantage of terminal features such as 256-color support.
set_tty
set_sane_term
adjust_term_settings

# Autoload some stuff.
setup_autoload

set_keybindings
remove_perl_overrides

is_ssh_session && dumpenv

choose_prompt () {
    local km=$1
    [[ -n $km ]] || km=$KEYMAP
    case $km in
        vicmd)      psvar[3]="◈◈";;
        viins|main) psvar[3]="";;
    esac
}

zle-keymap-select () {
    choose_prompt
    zle reset-prompt
}

zle-line-init () {
    if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
        emulate -L zsh
        printf '%s' ${terminfo[smkx]}
    fi
    choose_prompt "main"
}
zle-line-finish () {
    if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
        emulate -L zsh
        printf '%s' ${terminfo[rmkx]}
    fi
    choose_prompt "main"
}

zle -N zle-line-init
zle -N zle-line-finish
zle -N zle-keymap-select
zle -N insert-unicode-char
zle -N edit-command-line

# Set up the prompt.
colors
promptinit
prompt bmc

silent whence lesspipe && eval $(lesspipe)

setup_completion
setup_colors

# Succeed.
true
