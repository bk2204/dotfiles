# bmc prompt theme, based off of the clint prompt theme from zsh 4.3.2-7.
# Yes, this does look like angry fruit salad, but I like it that way.

prompt_bmc_help () {
    cat <<'EOF'

    prompt bmc
EOF
}

prompt_bmc_want_bold () {
    local text=$1

    [ -z "$text" ] && return 1
    for i in no off false regular normal non-bold
    do
        [ "$text" = "$i" ] && return 1
    done
    return 0
}

prompt_bmc_reset_color () {
    [[ $TERM = dumb ]] && return
    printf '%s' "$reset_color"
}

prompt_bmc_setup_base () {
    local -A args
    local -A pcc
    local i j
    local c_reset="%b%{$(prompt_bmc_reset_color)%}"

    zstyle ':vcs_info:*' enable git
    zstyle ':vcs_info:*' actionformats "($bmc_palette_colors[vcs]%b|%a%$c_reset%)" "%R"
    zstyle ':vcs_info:*' formats       "($bmc_palette_colors[vcs]%b%$c_reset%)" "%R"

    local p_privuser="$bmc_palette_colors[privuser]%n$c_reset"
    local p_unprivuser="$bmc_palette_colors[unprivuser]%n$c_reset"
    local p_user="%(!.$p_privuser.$p_unprivuser)$bmc_palette_colors[user]@%m$c_reset"
    local p_pwd="$bmc_palette_colors[pwd]%~$c_reset"

    local p_userpwd="$p_user:$p_pwd"

    local p_priv="$bmc_palette_colors[priv]#$c_reset"
    local p_unpriv="$bmc_palette_colors[unpriv]%%$c_reset"

    local p_pchar="%(!.$p_priv.$p_unpriv)"

    # Don't use the %D by itself, because it uses two-digit years.
    local p_date="$bmc_palette_colors[date]%D{%Y-%m-%d}$c_reset"
    # Similarly, don't use %* by itself, because it is not zero-padded.
    local p_time="$bmc_palette_colors[time]%D{%H:%M:%S}$c_reset"

    local p_datetime="$p_date/$p_time"

    is-at-least 5.3 && local p_hostname="$bmc_palette_colors[hostcolor]%m$c_reset:"

    local p_tty="$bmc_palette_colors[tty]%l$c_reset"

    local p_shlvl='${psvar[4]}'
    local p_power="%(2V.($bmc_palette_colors[tty]%2v$c_reset).)"

    local p_failed="$bmc_palette_colors[retcode]failed$c_reset"
    local p_retcode="$bmc_palette_colors[retcode]%?$c_reset"
    local p_signame="$bmc_palette_colors[retcode]%1v$c_reset"
    local p_mode='${psvar[3]:-%(?.ok.no)}'

    local p_ret="%(?.ok.$p_failed:$p_retcode:$p_signame)"
    local p_host="$bmc_palette_colors[host]%m $p_mode$c_reset"

    local p_branch='${${vcs_info_msg_1_/$HOME}:+${vcs_info_msg_0_}}'
    local p_space="$bmc_palette_colors[space] $c_reset"

    POSTEDIT="$(prompt_bmc_reset_color)"

    prompt="$p_userpwd$p_branch
($p_datetime)($p_hostname$p_tty)$p_shlvl$p_power($p_ret)
$p_host $p_pchar$p_space"
    RPROMPT=""
    PS2='%(4_.\.)%3_> %E'

    local parent_exe
    if [ "$OSTYPE" = linux-gnu ]
    then
        parent_exe="/proc/$PPID/exe"
        parent_exe="${parent_exe:A}"
    else
        parent_exe="$(ps -p $PPID -o comm= 2>/dev/null)"
    fi

    case $SHLVL:$parent_exe in
        1:*)
            psvar[4]="";;
        *:*tmux*|*:*terminal|*:*rxvt|*:*term)
            psvar[4]="";;
        *:*)
            psvar[4]="($bmc_palette[tty]$SHLVL$c_reset)";;
    esac

    if [[ -d /sys/class/power_supply ]] && [[ ! -f "$HOME/.slowbox" ]]
    then
        precmd () { prompt_bmc_precmd; prompt_bmc_apm_precmd }
    else
        precmd () { prompt_bmc_precmd }
    fi
    preexec () { }
}

prompt_bmc_setup () {
    prompt_bmc_setup_base

    choose_prompt "main"
}

# In this function, we have to put the setopt after the exitstatus assignment,
# otherwise we get the result of the setopt (AFAIK, always 0) which is obviously
# not very useful.
prompt_bmc_precmd () {
    local exitstatus=$?
    setopt noxtrace localoptions

    if [[ $exitstatus -ge 128 ]]
    then
        psvar[1]="$signals[$exitstatus-127]"
    else
        psvar[1]="none"
    fi

    local curstatus
    [[ -n $TMUX ]] && curstatus="$(tmux display-message -p '#W' 2>/dev/null)"

    # Update prompt unless the title starts with a ZWSP (U+200B) or colon.
    local zwsp="$(printf '\342\200\213')"
    if printf "%s\n" "$curstatus" | grep -Eqvs "^($zwsp|:)"
    then
        local statusline='%n@%m: %~'
        case $TERM in
            xterm*|gnome*)
                print -Pn "\e]0;$statusline\a";;
            screen*|tmux*)
                print -Pn "\ek$statusline\e\\";;
        esac
    fi

    prompt_bmc_need_refresh && command -v vcs_info >/dev/null 2>&1 && vcs_info 2>/dev/null
}

prompt_bmc_need_refresh () {
    local last="$(fc -ln -1)"
    [[ -f "$HOME/.slowbox" ]] || return 0
    # If we're on a slow box, we want to refresh on cd, pushd, popd, git, and
    # empty text.
    [[ -z ${last/cd*} ]] && return 0
    [[ -z ${last/pushd*} ]] && return 0
    [[ -z ${last/popd*} ]] && return 0
    [[ -z ${last/git*} ]] && return 0
    [[ -z $last ]] && return 0
    return 1
}

prompt_bmc_apm_precmd () {
    setopt noxtrace localoptions
    local bat ac
    local bat_now bat_full
    local has_ac has_bat

    has_ac=0
    has_bat=0

    local i
    for i in $(find /sys/class/power_supply -type d -o -type l 2>/dev/null)
    do
        if [[ -f "$i/type" ]]
        then
            local class="$(<"$i/type")"
            if [[ -f "$i/online" ]] && [[ $(<"$i/online") = 1 ]] && [[ $class = Mains ]]
            then
                has_ac=1
            elif [[ $class = Battery ]]
            then
                if [ -r "$i/charge_now" ]
                then
                    has_bat=1
                    bat_now=$(<"$i/charge_now")
                    bat_full=$(<"$i/charge_full")
                elif [ -r "$i/energy_now" ]
                then
                    has_bat=1
                    bat_now=$(<"$i/energy_now")
                    bat_full=$(<"$i/energy_full")
                else
                    # This might be the battery of another device, such as a
                    # Bluetooth device connected to us.
                    continue
                fi

                bat=$((100 * bat_now / bat_full))
                [[ $bat -gt 100 ]] && bat=100
                bat="$bat%"
            fi
        fi
    done
    [ $has_ac = 1 ] && ac="ac"
    [ $has_bat = 1 ] && [ $has_ac = 1 ] && ac="ac+"

    if [[ $has_ac = 0 ]] && [[ $has_bat = 0 ]]
    then
        psvar[2]=""
    else
        psvar[2]="$ac$bat"
    fi
}

prompt_bmc_setup "$@"

# vim: set filetype=zsh:
