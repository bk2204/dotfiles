# brian m. carlson's zshenv.

# Useful functions used in this file.  General definitions go in .zshrc.
has_locale () {
    local locale="$1"

    [ -x "$(command -v perl)" ] || return 0
    perl -MPOSIX=locale_h -E 'exit !setlocale(LC_ALL, $ARGV[0]);' "$locale" \
        2>/dev/null
}

preferred_locale () {
    local locale=$(sed -e 's/.utf8$/.UTF-8/' <<<"$LANG")
    # If we're using English, prefer Canadian English; otherwise, accept English,
    # Spanish, or French locales.  Otherwise, fall back to US English.
    if [[ -z ${locale##en*.UTF-8} ]] && has_locale 'en_CA.UTF-8'; then
        printf "en_CA.UTF-8"
        return 0
    elif [[ -z ${locale##(en|es|fr)*.UTF-8} ]]; then
        printf '%s' "$locale"
        return 0
    fi
    printf "en_US.UTF-8"
}

setup_browser () {
    setopt localoptions shwordsplit
    local i=""
    local chrome="google-chrome-beta chromium-browser chromium google-chrome"
    local firefox="firefox iceweasel"
    for i in $firefox $chrome
    do
        if command -v "$i" >/dev/null 2>&1
        then
            export BROWSER="$i"
            break
        fi
    done
}

is_ssh_session () {
    [[ -n $SSH_CLIENT ]] || [[ -n $SSH_CONNECTION ]] || [[ -n $SSH_TTY ]]
}

is_docker_session () {
    [[ -e /proc/1/cgroup ]] && grep -qs docker /proc/1/cgroup
}

# Return true if our home directory is owned by someone other than us.
is_privileged () {
    zmodload -F zsh/stat b:zstat
    [ "$(zstat -L +uid "$HOME")" -ne "$(id -u)" ]
}

setup_ssh_agent () {
    local i
    is_ssh_session && return
    is_privileged && return
    grep enable-ssh-support ~/.gnupg/gpg-agent.conf 2>/dev/null | \
        grep -qsv '^#' || return
    gpg-connect-agent /bye >/dev/null 2>&1
    for i in "$(gpgconf --list-dirs | grep '^agent-socket:' | cut -d: -f2)" \
        "$HOME/.gnupg/S.gpg-agent" \
        "/run/user/$(id -u)/gnupg/S.gpg-agent"
    do
        [[ -S "$i.ssh" ]] && export SSH_AUTH_SOCK="$i.ssh"
    done
}

setup_temp () {
    local i
    for i in "$TMPDIR" "$TEMPDIR" "$TMP" "$TEMP" "/tmp"
    do
        if [[ -n $i ]]
        then
            # Remove trailing slash.
            i=$(sed -e 's,/*$,,' <<<"$i")

            # This is the POSIX variable.
            export TMPDIR="$i"
            export TEMPDIR="$i"
            # This is the short, easy-to-type variable.
            export TMP="$i"
            export TEMP="$i"
            return
        fi
    done
}

bmc_editor () {
    local console="" dumb="" display="" detach="" fallback=t

    while [[ -n $1 ]]
    do
        case "$1" in
            --console)
                console=t;;
            --dumb)
                dumb=t;;
            --detach)
                detach=t;;
            --fallback)
                fallback=t;;
            --no-fallback)
                fallback="";;
        esac
        shift
    done

    [[ -n $DISPLAY ]] && display=t
    [[ $TERM = dumb ]] && dumb=t

    local i
    for i in 'nvim-gtk --no-fork' 'gvim -f' 'mvim -f' nvim-gtk gvim mvim nvim vimx vim vi ex
    do
        local root="${i%% *}"
        local ok=""
        # True if there are no arguments to the command.
        local root_only="$([ "$i" = "$root" ] && echo t)"
        case "$root:$root_only:$detach:$console:$dumb:$display:$OSTYPE" in
            nvim-gtk::::*:t:*) ok=t;;
            nvim-gtk:t:t::*:t:*) ok=t;;
            gvim::::*:t:*) ok=t;;
            gvim:t:t::*:t:*) ok=t;;
            mvim::::*:*:darwin) ok=t;;
            mvim:t:t::*:*:darwin) ok=t;;
            ex:*::*:t:*:*) ok=t;;
            nvim:*::*::*:*) ok=t;;
            vimx:*::*::*:*) ok=t;;
            vim:*::*::*:*) ok=t;;
            vi:*::*::*:*) ok=t;;
        esac

        if [[ -n "$ok" ]] && command -v "$root" >/dev/null 2>&1
        then
            printf '%s' "$i"
            return
        fi
    done

    [[ -n $fallback ]] && printf 'vi'
}

source_if_present () {
    local fn="$1"
    [[ -f $fn ]] && source "$fn"
}

# Set up some limits.
unlimit
limit core 0

# Set up umask.  If we have private groups, use 002; otherwise, use 022.
if [[ $(id -u -n) = $(id -g -n) ]]; then
    umask 002
else
    umask 022
fi

# Prevent tampering with our config.
unsetopt globalrcs

ANDROID_HOME="$HOME/apps/android-sdk"
export ANDROID_HOME

if [[ -z $BMC_TEST ]]
then
    prevpath=$PATH

    # Nuke dupes.
    typeset -U path cdpath manpath fpath
    typeset -U PATH CDPATH MANPATH FPATH
    typeset -UT COREPATH corepath

    # Set up miscellaneous paths.
    manpath=(
        ~/man
        /usr/share/man
        /usr/local/share/man
    )
    path=(
        ~/bin
        ~/.local/bin
        ~/.rvm/bin
        ~/.cargo/bin
        /usr/local/bin
        /usr/local/sbin
        /usr/bin
        /usr/sbin
        /bin
        /sbin
        /usr/games
        $ANDROID_HOME/tools
        $ANDROID_HOME/platform-tools
    )
    corepath=(
        /usr/bin
        /usr/sbin
        /bin
        /sbin
        /usr/games
    )
    fpath=($fpath[2,-1] ~/.zsh)

    PATH="$PATH:$prevpath"
    unset prevpath

    # Export miscellaneous paths.
    export MANPATH PATH COREPATH
fi

# Set other variables.
setopt allexport

if [[ -z $TERM ]] && ! tty >/dev/null 2>&1
then
    TERM=dumb
fi

if [[ ! -d "$HOME/.rvm" ]] && command -v ruby >/dev/null 2>&1
then
    ver="$(ruby -e 'puts RUBY_VERSION')"
    if [[ -z $GEM_HOME ]]
    then
        GEM_HOME="${XDG_DATA_HOME:-$HOME/.local/share}/gems/$ver"
    fi
    unset ver
fi

if [[ -n "$CODESPACES" ]]; then
    REMOTE_ENV=codespaces
fi

LANG=$(preferred_locale)
LC_ADDRESS=en_CA.UTF-8
LC_COLLATE=$(preferred_locale)
LC_CTYPE=en_CA.UTF-8
LC_IDENTIFICATION=$(preferred_locale)
LC_MONETARY=en_CA.UTF-8
LC_MEASUREMENT=POSIX
LC_MESSAGES=$(preferred_locale)
LC_NAME=$(preferred_locale)
LC_NUMERIC=en_CA.UTF-8
LC_PAPER=en_CA.UTF-8
LC_TIME=POSIX
LC_TELEPHONE=en_CA.UTF-8
TZ=UTC

DEBFULLNAME="brian m. carlson"
EMAIL="sandals@crustytoothpaste.net"
DEBEMAIL="$EMAIL"
GIT_PAGER="less -FRSX"
PAGER="less -R"
PERLDOC_PAGER="$PAGER"
LESS="-fR"
EDITOR=$(bmc_editor --dumb)
VISUAL=$(bmc_editor)
GIT_MERGE_AUTOEDIT=no
XML_CATALOG_FILES="$HOME/.crustytoothpaste/groups/metadata/xml-catalogs/catalog.xml"
MODULE_SIGNATURE_CIPHER=SHA512
# Don't use weird escapes in ls.
QUOTING_STYLE=literal
GOPATH="$HOME/checkouts/go"
GOPROXY=direct

if [[ ! -e "$XML_CATALOG_FILES" ]]; then
    unset XML_CATALOG_FILES
fi
if [[ -z $HOSTNAME ]]; then
    HOSTNAME=$(hostname)
fi
if has_locale en_DK.UTF-8; then
    LC_TIME=en_DK.UTF-8
fi

unsetopt allexport
# End exporting variables.

setup_browser
setup_ssh_agent
setup_temp
source_if_present "$HOME/.rvm/scripts/rvm"

unfunction is_privileged
unfunction has_locale
unfunction preferred_locale
unfunction setup_browser
unfunction setup_ssh_agent
unfunction setup_temp

true
